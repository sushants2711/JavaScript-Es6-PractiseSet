FUNCTIONAL PROGRAMMING
SET:-1 (BEGINNER)
1.	  Write an ES6 function that takes an array of numbers and returns an array with each number incremented by 3 using the map method.

2.	  Write an ES6 function that takes an array of strings and returns an array with all the strings capitalised using the map method.

3.	Write an ES6 function that takes an array of objects representing people and returns an array of their ages using the map method.

4.	  Write an ES6 function that takes an array of objects representing products and returns an array with the product names in all lower case letters using the map method.

5.	  Write an ES6 function that takes an array of objects representing cities and returns an array of their names using the map method.

6.	  Write an ES6 function that takes an array of strings and returns an array with only the strings that have a length greater than 5.

7.	  Write an ES6 function that takes an array of numbers and returns an array with only the numbers that are divisible by 3 and also by 5.

8.	  Write an ES6 function that takes an array of objects with the properties name and age, and returns an array with only the objects that have an age greater than 30.

9.	  Write an ES6 function that takes an array of objects with the properties name and score, and returns an array with only the objects that have a score greater than 80.

10.	  Write an ES6 function that takes an array of objects with the properties name, age and city, and returns an array with only the objects that have a city property of "Indore" and age greater than 70.

11.	  Write an ES6 function that takes an array of objects containing book information (title, author, genre) and returns an array with only the books of "Science Fiction".

12.	  Write an ES6 function that takes an array of objects containing employee information (name, age, salary) and returns an array with only the employees who earn a salary above 22000 and age is above 25.

SET:-1 (MID - LEVEL)
 1. Write a function that takes an array of numbers and returns a new array
 where each number is the result of multiplying the corresponding number in 
 the original array by its index. Use the `map` method.

 2. Write a function that takes an array of objects with properties `name` 
 and `price` and returns a new array of names sorted by price in ascending order.

 3. Write a function that takes an array of strings and returns a new array
 where each string is reversed. Use the `map` method.

 4. Write a function that takes a number `n` and returns the sum of all 
 the numbers divisible by 5 and 7, up to `n`.

 5. Write a function that takes an array of objects with properties `name`,
 `age`, and `city`. Return the object with the highest age from the array.

 6. Write a function that takes a string and returns a new string where 
 each character is shifted by `n` positions in the alphabet. If `n` is negative,
 the shift should be reversed. Handle both uppercase and lowercase letters.


 7. Write a function that takes an array of numbers and returns an object 
 containing the sum, average, maximum, and minimum of the numbers in the array.

 8. Write a function that accepts an array of strings, where each string 
 represents a number in words (e.g., "one", "three", "seven"). The function 
 should return the sum of these numbers.

 9. Write a function that takes an array of objects with properties `name` 
 and `score`. Return a new array of the top 3 highest-scoring students.


 10. Write a function that takes an array of objects representing events, 
 each with properties `date` and `name`, and returns the event that occurs 
 the soonest (i.e., has the earliest `date`).


 11. Write a function that accepts a nested array, where each sub-array 
 represents a collection of numbers. Return a flattened array containing 
 all the numbers in the sub-arrays, sorted in ascending order.


 12. Write a function that takes an array of strings, checks for duplicate 
 strings, and returns a new array that contains only unique strings (without using `Set`).

SET:-1 (ADVANCED)

 1. Write a function that takes an array of objects with properties `start` and `end` (representing time intervals).
    The function should return an array of intervals that are merged if they overlap.
 2. Write a function that takes a deeply nested object and a string representing a path (e.g., "user.address.city"). 
    The function should return the value located at that path, or `undefined` if the path does not exist.

 3. Write a function that implements a debounce mechanism. The function should accept a callback and a delay, 
    and it should delay the execution of the callback until after the specified delay has passed since the last 
    invocation of the function.


 4. Write a function that accepts a number and returns an array of all its divisors. 
    The function should optimize the process of finding divisors by checking only up to the square root of the number.


 5. Write a function that accepts a list of strings and returns a new string that contains all the unique 
    characters across the strings, sorted in lexicographical order.


 6. Write a function that implements a custom `map` function that mimics the behavior of `Array.prototype.map`.
    It should accept a callback and return a new array with the results of calling the provided function on every element in the original array.


 7. Write a function that takes an array of objects representing a hierarchical tree structure (e.g., categories with subcategories),
    and returns the hierarchy flattened into a single-level array with properties `id`, `parentId`, and `name`.


 8. Write a function that implements a `Promise.all`-like function but resolves the promises sequentially,
    i.e., waits for one promise to resolve before moving to the next one.


 9. Write a function that accepts a string and returns the longest substring without repeating characters. 
    The function should implement an efficient algorithm with a time complexity of O(n).


 10. Write a function that implements deep cloning of an object. It should handle circular references and objects with special properties (e.g., Date, RegExp, Map, Set).


 11. Write a function that implements a "rate limiter" for API calls. The function should allow a maximum of `n` API requests to be made per `m` milliseconds. 
    Ensure the requests are executed at a rate not exceeding this limit.


 12. Write a function that accepts two arrays of objects and returns a new array where the objects are merged by a unique identifier property (e.g., `id`),
     combining their properties into one object for each `id`. Ensure that if the `id` exists in both arrays, the object from the second array takes precedence.
